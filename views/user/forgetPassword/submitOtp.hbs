<style>
  #resendButton {
    color: #fff; /* Change text color to white */
    background-color: #000; /* Set background to black for better contrast */
  }

  .otp-field {
    flex-direction: row;
    column-gap: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .otp-field input {
    height: 45px;
    width: 42px;
    border-radius: 6px;
    outline: none;
    font-size: 1.125rem;
    text-align: center;
    border: 1px solid #ddd;
  }

  .otp-field input:focus {
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
  }

  .otp-field input::-webkit-inner-spin-button,
  .otp-field input::-webkit-outer-spin-button {
    display: none;
  }

  .text-center {
    text-align: center;
  }
</style>

<main class="main">
  <div class="page-header breadcrumb-wrap">
    <div class="container">
      <div class="breadcrumb">
        <a href="/" rel="nofollow">Home</a>
        <span></span> OTP
      </div>
    </div>
  </div>

  <section class="pt-150 pb-150">
    <div class="container">
      <div class="row">
        <div class="col-lg-10 m-auto">
          <div class="row">
            <div class="col-lg-5 m-auto">
              <div class="login_wrap widget-taber-content p-30 background-white border-radius-10 mb-md-5 mb-lg-0 mb-sm-5">
                <div class="padding_eight_all bg-white">
                  <div class="heading_s1">
                    <h3 class="text-center mb-30">Enter OTP</h3>
                  </div>

                  <form action="/otp" method="post" id="otp-form">
                    <h6 style="color: red;" class="text-center mb-5" id="otp-error"></h6>

                    <!-- OTP Input Fields -->
                    <div class="form-floating mb-3 input-control">
                      <div class="otp-field mb-4">
                        <input type="number" name="otp" id="digit1" maxlength="1" oninput="moveFocus(this, 'digit2')" />
                        <input type="number" name="otp" id="digit2" maxlength="1" oninput="moveFocus(this, 'digit3')" disabled />
                        <input type="number" name="otp" id="digit3" maxlength="1" oninput="moveFocus(this, 'digit4')" disabled />
                        <input type="number" name="otp" id="digit4" maxlength="1" disabled />
                      </div>
                    </div>

                    <div class="text-center">
                      <button type="submit" class="btn btn-fill-out btn-block hover-up">Submit</button>
                      <p class="text-primary my-3">Time left: <span id="timer">60</span> seconds</p>
                      <button class="btn hover-up" id="resendButton" onclick="resendOTP()" disabled>
                        <a href="javascript:void(0);">Resend OTP</a>
                      </button>
                    </div>
                  </form>

                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>

<script>
// Timer for countdown
let countdown = 60;
let timerElement = document.getElementById('timer');
let resendButton = document.getElementById('resendButton');
let countdownInterval;

// Update countdown timer every second
function updateTimer() {
    timerElement.textContent = countdown;
    countdown--;
    resendButton.disabled = true; // Disable resend button while counting down
    if (countdown < 0) {
        clearInterval(countdownInterval);
        timerElement.textContent = '0';
        resendButton.disabled = false; // Enable resend button after 60 seconds
    }
}

// Function to resend OTP
function resendOTP() {
    // Send a POST request to the backend to resend the OTP
    fetch('/resend_otp', { 
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('OTP has been resent!');
            // Reset timer to 60 seconds and restart countdown
            countdown = 60;
            timerElement.textContent = countdown;
            resendButton.disabled = true;
            countdownInterval = setInterval(updateTimer, 1000);
        } else {
            alert(data.error || 'Error resending OTP. Please try again later.');
        }
    })
    .catch(error => {
        console.error('Error resending OTP:', error);
        alert('Error resending OTP. Please try again later.');
    });
}


// Initial countdown
countdownInterval = setInterval(updateTimer, 1000);

// Handle OTP field input and automatic focus change
const inputs = document.querySelectorAll(".otp-field > input");
const button = document.querySelector(".btn");

window.addEventListener("load", () => inputs[0].focus());

inputs.forEach((input, index1) => {
    input.addEventListener("keyup", (e) => {
        const currentInput = input;
        const nextInput = input.nextElementSibling;
        const prevInput = input.previousElementSibling;

        if (currentInput.value.length > 1) {
            currentInput.value = ""; // Ensure only one digit per field
            return;
        }

        if (nextInput && nextInput.hasAttribute("disabled") && currentInput.value !== "") {
            nextInput.removeAttribute("disabled");
            nextInput.focus();
        }

        if (e.key === "Backspace") {
            inputs.forEach((input, index2) => {
                if (index1 <= index2 && prevInput) {
                    input.setAttribute("disabled", true);
                    input.value = "";
                    prevInput.focus();
                }
            });
        }

        button.classList.remove("active");
        button.setAttribute("disabled", "disabled");

        if (!inputs[inputs.length - 1].disabled && inputs[inputs.length - 1].value !== "") {
            button.classList.add("active");
            button.removeAttribute("disabled");
        }
    });
});

// Prevent pasting invalid OTP into fields
inputs[0].addEventListener("paste", function (event) {
    event.preventDefault();

    const pastedValue = (event.clipboardData || window.clipboardData).getData("text");
    const otpLength = inputs.length;

    for (let i = 0; i < otpLength; i++) {
        if (i < pastedValue.length) {
            inputs[i].value = pastedValue[i];
            inputs[i].removeAttribute("disabled");
            inputs[i].focus;
        } else {
            inputs[i].value = ""; // Clear remaining inputs
            inputs[i].focus;
        }
    }
});

// Handle OTP form submission
const form = document.getElementById('otp-form');
form.addEventListener('submit', async (e) => {
    e.preventDefault(); // Prevent page reload

    const otp = Array.from(inputs).map(input => input.value).join('');
    console.log(otp);

    try {
        const response = await fetch('/otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ otp }),
        });

        const result = await response.json();
        if (result.error) {
            document.getElementById('otp-error').textContent = result.error;
        } else {
            window.location.href = '/reset_password';
        }
    } catch (error) {
        console.error(error);
    }
});
</script>
